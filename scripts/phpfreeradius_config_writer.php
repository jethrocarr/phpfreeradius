<?php
/*
	phpfreeradius_config_writer

	Connects to phpfreeradius and fetching NAS/Huntgroup configuration which
	is then written to the filesystem.


	Copyright (c) 2010 Amberdms Ltd

	Licensed under the GNU AGPL.
*/



/*
	CONFIGURATION
*/

require("include/config.php");
require("include/amberphplib/main.php");




/*
	Verify that the FreeRadius files are writable
*/
if (!is_writable($GLOBALS["config"]["freeradius_file_clients"]))
{
	log_write("error", "script", "Unable to write to FreeRadius configuration file ". $GLOBALS["config"]["freeradius_file_clients"]);
	die("Fatal Error");
}

if (!is_writable($GLOBALS["config"]["freeradius_file_huntgroups"]))
{
	log_write("error", "script", "Unable to write to FreeRadius huntgroups file ". $GLOBALS["config"]["freeradius_file_huntgroups"]);
	die("Fatal Error");
}

if (!is_writable($GLOBALS["config"]["freeradius_file_users"]))
{
	log_write("error", "script", "Unable to write to FreeRadius users file ". $GLOBALS["config"]["freeradius_file_users"]);
	die("Fatal Error");
}




/*
	Initiate connection & authenticate to phpfreeradius

*/
$client = new SoapClient($GLOBALS["config"]["api_url"] ."/phpfreeradius.wsdl");
$client->__setLocation($GLOBALS["config"]["api_url"] ."/phpfreeradius.php");


// login & get PHP session ID
try
{
	log_write("debug", "script", "Authenticating with API as radius server ". $GLOBALS["config"]["api_server_name"] ."...");

	if ($client->authenticate($GLOBALS["config"]["api_server_name"], $GLOBALS["config"]["api_auth_key"]))
	{
		log_write("debug", "script", "Authentication successful");
	}

}
catch (SoapFault $exception)
{
	if ($exception->getMessage() == "ACCESS_DENIED")
	{
		log_write("error", "script", "Unable to authenticate with phpfreeradius API - check that auth API key and server name are valid");
		die("Fatal Error");
	}
	else
	{	
		log_write("error", "script", "Unknown failure whilst attempting to authenticate with the API - ". $exception->getMessage() ."");
		die("Fatal Error");
	}
}



/*
	Find out if any config has changed
*/
try
{
	if (!$config_version = $client->check_update_version())
	{
		// all good
		log_write("debug", "script", "System configuration is uptodate, no changes nessacary");
		exit(0);
	}
	else
	{
		/*
			Configuration is out of date - we need to fetch all the NAS records
		*/

		log_write("debug", "script", "Configuration is out of date, fetching new NAS configuration version $config_version via API");

		$data_nas = $client->fetch_nas_config();
	}
}
catch (SoapFault $exception)
{
	log_write("error", "script", "An unexpected error occured ". $exception->getMessage() ."");
	die("Fatal Error");
}




/*
	Write Configuration

	Need to generate:
	- NAS/clients
	- Huntgroups
	- Users
*/




/*
	NAS CONFIGURATION FILE
*/
log_write("debug", "script", "Writing NAS configuration file ". $GLOBALS["config"]["freeradius_file_clients"] ."");

if (!$fh = fopen($GLOBALS["config"]["freeradius_file_clients"], "w"))
{
	log_write("error", "main", "Unable to open file ". $GLOBALS["config"]["freeradius_file_clients"] ." for writing");
	die("Fatal Error");
}

fwrite($fh, "#\n");
fwrite($fh, "# FREERADIUS NAS CONFIGURATION\n");
fwrite($fh, "# automatically generated by phpfreeradius - do not manually adjust as changes will be lost\n");
fwrite($fh, "#\n");
fwrite($fh, "# application version ". $GLOBALS["config"]["app_version"] . " configuration version $config_version\n");
fwrite($fh, "#\n");
fwrite($fh, "\n");

foreach ($data_nas as $nas)
{
	fwrite($fh, "# ". $nas["nas_hostname"] ."\n");

	// make sure we don't break on description newlines
	$nas["nas_description"] = preg_replace("/\r/", "", $nas["nas_description"]);
	$nas["nas_description"] = preg_replace("/\n/", "\n# ", $nas["nas_description"]);

	fwrite($fh, "# ". $nas["nas_description"] ."\n");

	fwrite($fh, "#\n");
	fwrite($fh, "client ". $nas["nas_address"] ." {\n");	
	fwrite($fh, "\tsecret = ". $nas["nas_secret"] ."\n");
	fwrite($fh, "\tshortname = ". $nas["nas_hostname"] ."\n");
	fwrite($fh, "\tnastype = ". $nas["nas_type"] ."\n");
	fwrite($fh, "}\n");
	fwrite($fh, "\n");
}		        

fclose($fh);



/*
	HUNTGROUP CONFIGURATION FILE
*/
log_write("debug", "script", "Writing huntgroup configuration file ". $GLOBALS["config"]["freeradius_file_huntgroups"] ."");

if (!$fh = fopen($GLOBALS["config"]["freeradius_file_huntgroups"], "w"))
{
	log_write("error", "main", "Unable to open file ". $GLOBALS["config"]["freeradius_file_huntgroups"] ." for writing");
	die("Fatal Error");
}

fwrite($fh, "#\n");
fwrite($fh, "# FREERADIUS HUNTGROUPS CONFIGURATION\n");
fwrite($fh, "# automatically generated by phpfreeradius - do not manually adjust as changes will be lost\n");
fwrite($fh, "#\n");
fwrite($fh, "# application version ". $GLOBALS["config"]["app_version"] . " configuration version $config_version\n");
fwrite($fh, "#\n");
fwrite($fh, "\n");

foreach ($data_nas as $nas)
{

	// determine the type of address
	if (preg_match("/^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:[.](?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$/", $nas["nas_address"]))
	{
		// single IP, write a rule
		fwrite($fh, $nas["nas_ldapgroup"] . "\tNAS-IP-Address == ". $nas["nas_address"] ."\n");
	}
	elseif (preg_match("/^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:[.](?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}\/[0-9]*$/", $nas["nas_address"]))
	{
		// subnet in CIDR notation
		// we need to calculate all the IP addresses in this subnet and then write them all to the configuration file

		$addresses = ipv4_subnet_members($nas["nas_address"]);

		foreach ($addresses as $address)
		{
			fwrite($fh, $nas["nas_ldapgroup"] . "\tNAS-IP-Address == $address\n");
		}
	}
	else
	{
		// hostname
		// need to fetch the associated IP address and then write to file

		fwrite($fh, $nas["nas_ldapgroup"] . "\tNAS-IP-Address == ". gethostbyname($nas["nas_address"]) ."\n");
	}


	// special case for localhost (only used when testing)
	if ($nas["nas_address"] == "127.0.0.1")
	{
		// radtest identified as 255.255.255.255
		fwrite($fh, $nas["nas_ldapgroup"] . "\tNAS-IP-Address == 255.255.255.255\n");
	}


	// spacer
	fwrite($fh, "\n");

}		        

fwrite($fh, "\n");
fclose($fh);



/*
	USERS FILE TO MAP GROUPS TO LDAP
*/

log_write("debug", "script", "Writing users configuration file ". $GLOBALS["config"]["freeradius_file_users"] ."");

if (!$fh = fopen($GLOBALS["config"]["freeradius_file_users"], "w"))
{
	log_write("error", "main", "Unable to open file ". $GLOBALS["config"]["freeradius_file_users"] ." for writing");
	die("Fatal Error");
}

fwrite($fh, "#\n");
fwrite($fh, "# FREERADIUS USER CONFIGURATION\n");
fwrite($fh, "# automatically generated by phpfreeradius - do not manually adjust as changes will be lost\n");
fwrite($fh, "#\n");
fwrite($fh, "# application version ". $GLOBALS["config"]["app_version"] . " configuration version $config_version\n");
fwrite($fh, "#\n");
fwrite($fh, "\n");

fwrite($fh, "#\n");
fwrite($fh, "# Map to LDAP groups\n");
fwrite($fh, "#\n");


// create array of each group
$data_huntgroups = array();

foreach ($data_nas as $nas)
{
	$data_huntgroups[ $nas["nas_ldapgroup"] ] = 1;
}


// write group configuration to file
foreach (array_keys($data_huntgroups) as $ldapgroup)
{
	fwrite($fh, "DEFAULT Huntgroup-Name == $ldapgroup, Ldap-Group == \"cn=$ldapgroup,". $GLOBALS["config"]["ldap_groupdn"] ."\", User-Profile := \"cn=$ldapgroup,". $GLOBALS["config"]["ldap_groupdn"] ."\"\n");
	fwrite($fh, "\tFall-Through = no\n");
	fwrite($fh, "\n");
}


fwrite($fh, "#\n");
fwrite($fh, "# Authenticate Against LDAP\n");
fwrite($fh, "#\n");
fwrite($fh, "DEFAULT Auth-Type := Reject\n");
fwrite($fh, "\tReply-Message = \"Authentication denied - user does not belong to any suitable groups to access this NAS\"\n");
fwrite($fh, "\n");


fclose($fh);




/*
	Reload FreeRadius
*/

log_write("debug", "script", "Reloading FreeRadius with new configuration using ". $config["freeradius_reload"] ."");

exec($config["freeradius_reload"], $exec_output, $exec_return_value);

if ($exec_return_value)
{
	// an error occured
	log_write("error", "script", "Unable to confirm successful reload of FreeRadius, potentially a configuration generation problem");
}
else
{
	// Success!
	log_write("debug", "script", "FreeRadius successfully reloaded with new configuration");
}


/*
	Confim Success
*/

try
{
	if (!$client->set_update_version($config_version))
	{
		log_write("debug", "script", "Unable to confirm successfull application of configuration version $config_version");
		die("Fatal Error");
	}
}
catch (SoapFault $exception)
{
	log_write("error", "script", "An unexpected error occured ". $exception->getMessage() ."");
	die("Fatal Error");
}




?>
